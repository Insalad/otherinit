--[[

 ░▒▓███████▓▒░░▒▓██████▓▒░░▒▓█▓▒░       ░▒▓██████▓▒░░▒▓███████▓▒░  
░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ 
░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ 
 ░▒▓██████▓▒░░▒▓████████▓▒░▒▓█▓▒░      ░▒▓████████▓▒░▒▓█▓▒░░▒▓█▓▒░ 
       ░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ 
       ░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ 
░▒▓███████▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓████████▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓███████▓▒░                                                                   
]]
if not game:IsLoaded() then game.Loaded:Wait() end
if not getgenv and not setreadonly and not clonefunction and not httpget and not getrawmetatable and not getnamecallmethod then repeat task.wait() until getgenv and setreadonly and clonefunction and httpget and getrawmetatable and getnamecallmethod end
-- vars
function saladprint(msg)
    --print("[ Salad ] -> "..msg)
end 
saladprint("defining vars")
getgenv().IS_SALAD_LOADED = false
getgenv().shared = shared 
local camera = workspace.CurrentCamera
local RunService = game:GetService("CoreGui")
-- tables 
saladprint("defining tables")
getgenv().syn = {}
getgenv().salad = {}
getgenv().syn_backup = {}
getgenv().ogfs = {}
local keyshit = {}
local protecteduis = {}
local names = {}
-- functions
saladprint("defining functions")
getgenv().makewriteable = newcclosure(function(taable)
    return setreadonly(taable, false)
end)
saladprint("makewriteable done")
getgenv().iswriteable = newcclosure(function(tbl)
    return not table.isfrozen(tbl)
end)
saladprint("iswriteable done")
getgenv().httppost = newcclosure(function(URL, body, contenttype) 
    return game:HttpPostAsync(URL, body, contenttype)
end)
saladprint("httppost done")
getgenv().syn.protect_gui = newcclosure(function(gui)
    names[gui] = {name = gui.Name, parent = gui.Parent}
    protecteduis[gui] = gui
    gui.Name = crypt.random(64)
    gui.Parent = gethui()
end)
saladprint("syn.protect_gui done")
getgenv().syn.unprotect_gui = newcclosure(function(gui)
    if names[gui] then
        gui.Name = names[gui].name
        gui.Parent = names[gui].parent
    end
    protecteduis[gui] = nil
end)
saladprint("syn.unprotect_gui done")
getgenv().syn.secure_call = newcclosure(function(func)
    local suc, rec = pcall(func) 
	if not suc then 
		warn("[ Syn Secure Call ]: "..tostring(rec))
	end 
end)
saladprint("syn.secure_call (ahah real!!) done")
getgenv().getprotecteduis = newcclosure(function()
    return protecteduis
end)
saladprint("getprotecteduis done")
local testdebug = table.clone(debug)

testdebug.getconstant = getgenv().getconstant
testdebug.getconstants = getgenv().getconstants
testdebug.getinfo = getgenv().getinfo
testdebug.setconstant = getgenv().setconstant
testdebug.getproto = getgenv().getproto
testdebug.getprotos = getgenv().getprotos
testdebug.getstack = getgenv().getstack
testdebug.setstack = getgenv().setstack
testdebug.getupvalue = getgenv().getupvalue
testdebug.getupvalues = getgenv().getupvalues
testdebug.setupvalue = getgenv().setupvalue
testdebug.getregistry = getgenv().getregistry

debug = testdebug
saladprint("cloned debug library")

getgenv().bit = {}
saladprint("initializing bit lib")

for i, v in next, bit32 do
bit[i] = v
end

bit.ror = bit.rrotate
bit.rol = bit.lrotate
bit.rrotate = nil
bit.lrotate = nil

bit.badd = function(a, b)
   return a + b
end
saladprint("bit.badd done")

bit.bsub = function(a, b)
   return a - b
end
saladprint("bit.bsub done")

bit.bdiv = function(a, b)
   return a / b
end
saladprint("bit.bdiv done")
bit.bmul = function(a, b)
   return a * b
end
saladprint("bit.bmul done")
bit.tobit = function(x)
  x = x % (2^32)
  if x >= 0x80000000 then x = x - (2^32) end
  return x
end
saladprint("bit.tobit done")
bit.tohex = function(x, n)
 n = n or 8
 local up
 if n <= 0 then
   if n == 0 then return '' end
   up = true
   n = - n
 end
 x = bit.band(x, 16^n-1)
 return ('%0'..n..(up and 'X' or 'x')):format(x)
end
saladprint("bit.tohex done")
bit.bswap = function(x)
 local a = bit.band(x, 0xff)
 x = bit.rshift(x, 8)
 local b = bit.band(x, 0xff)
 x = bit.rshift(x, 8)
 local c = bit.band(x, 0xff)
 x = bit.rshift(x, 8)
 local d = bit.band(x, 0xff)
 return bit.lshift(bit.lshift(bit.lshift(a, 8) + b, 8) + c, 8) + d
end
saladprint("bit.bswap done")
saladprint("bit lib done")
getgenv().setthreadidentity = newcclosure(function(identity: number): ()
    _setidentity(identity)
    task.wait()
end)
saladprint("setthreadidentity modif done")
getgenv().setidentity = getgenv().setthreadidentity
getgenv().setthreadcontext = getgenv().setthreadidentity
saladprint("setidentity aliases done")
getgenv().getinstances = newcclosure(function()
            local objs = {}
            for i,v in next, getreg() do
               if type(v)=='table' then
                  for o,b in next, v do
                      if typeof(b) == "Instance" then
                           table.insert(objs, b)
                      end
                  end
               end
            end
         return objs
 end)
 saladprint("getinstances done")

do
    saladprint("comm channels initializing")
    local CoreGui = game:GetService('CoreGui')
    local HttpService = game:GetService('HttpService')
    local comm_channels = CoreGui:FindFirstChild('comm_channels') or Instance.new('Folder', CoreGui)
    if comm_channels.Name ~= 'comm_channels' then
        comm_channels.Name = 'comm_channels'
    end
    getgenv().create_comm_channel = newcclosure(function() 
        local id = HttpService:GenerateGUID()
        local event = Instance.new('BindableEvent', comm_channels)
        event.Name = id
        return id, event
    end)
    saladprint("create done")
    getgenv().get_comm_channel = newcclosure(function(id) 
        assert(type(id) == 'string', 'string expected as argument #1')
        return comm_channels:FindFirstChild(id)
    end)
    saladprint("get done")
end
saladprint("getactors")
getgenv().getactors = newcclosure(function()
    local actors = {};
    for i, v in game:GetDescendants() do
        if v:IsA("Actor") then
            table.insert(actors, v);
        end
    end
    return actors;
end);
saladprint("getactors done")
getgenv().getnilinstances = newcclosure(function()
    local objs = {}
	for i,v in next,getreg() do
		if type(v)=="table" then
			for o,b in next,v do
				if typeof(b) == "Instance" and b.Parent==nil then
					table.insert(objs, b)
				end
			end
		end
	end
	return objs
end)
saladprint("getnilinstances done")
getgenv().getscripthash = newcclosure(function(script)
    return script:GetHash()
end)
saladprint("getscripthash done")
setreadonly(getgenv().debug,false)
getgenv().debug.traceback = getrenv().debug.traceback
getgenv().debug.profilebegin = getrenv().debug.profilebegin
getgenv().debug.profileend = getrenv().debug.profileend
getgenv().debug.getmetatable = getgenv().getrawmetatable
getgenv().debug.setmetatable = getgenv().setrawmetatable
getgenv().debug.info = getrenv().debug.info
saladprint("debug done")
getgenv().getrunningscripts = newcclosure(function()
    local t = table.create(0)

    for i,v in pairs(getreg()) do
        if typeof(v) == "thread" then
            local a = gettenv(v)

            if a["script"] then
                if not table.find(t,a.script) then
                    table.insert(t, a.script)
                end
            end
        end
    end

return t

end)
saladprint("getrunningscripts done")
getgenv().getloadedmodules = newcclosure(function()
    local list = {}
    for i, v in getgc(false) do
        if typeof(v) == "function" then
            local success, env = pcall(getfenv, v)
            if success and typeof(env) == "table" and typeof(env["script"]) == "Instance" and env["script"]:IsA("ModuleScript") then
                if not table.find(list, env["script"]) then
                    table.insert(list, env["script"])
                end
            end
        end
    end
    return list
end)
saladprint("getloadedmodules done")
getgenv().getsenv = newcclosure(function(script_instance)
   for i, v in pairs(getreg()) do
      if type(v) == "function" then
         if getfenv(v).script == script_instance then
             return getfenv(v)
             end
          end
     end
end)

getgenv().isnetworkowner = newcclosure(function(part: BasePart): boolean
    return part.ReceiveAge == 0 and not part.Anchored and part.Velocity.Magnitude > 0
end)
saladprint("isnetworkowner done")
getgenv().firesignal = newcclosure(function(signal, ...)
    local connections = getconnections(signal)
    for _, connection in connections do
        connection.Function(...)
    end
end)
saladprint("firesignal done")
getgenv().setsimulationradius = newcclosure(function(newRadius)
    assert(newRadius, `arg #1 is missing`)
    assert(type(newRadius) == "number", `arg #1 must be type number`)

    local LocalPlayer = game:GetService("Players").LocalPlayer
    if LocalPlayer then
        LocalPlayer.SimulationRadius = newRadius
        LocalPlayer.MaximumSimulationRadius = newRadius
    end
end)

getgenv().getsimulationradius = newcclosure(function()
    assert(newRadius, `arg #1 is missing`)
    assert(type(newRadius) == "number", `arg #1 must be type number`)

    local LocalPlayer = game:GetService("Players").LocalPlayer
    if LocalPlayer then
        return LocalPlayer.SimulationRadius
    end
end)
saladprint("get/set simulationradius done")

getgenv().fireproximityprompt = newcclosure(function(proximityprompt, amount, skip)
    assert(
        typeof(proximityprompt) == "Instance" and proximityprompt:IsA("ProximityPrompt"),
        `arg #1 must be ProximityPrompt`
    )

    if amount ~= nil then
        assert(type(amount) == "number", `arg #2 must be type number`)
        if skip ~= nil then
            assert(type(skip) == "boolean", `arg #3 must be type boolean`)
        end
    end

    local oldHoldDuration = proximityprompt.HoldDuration
    local oldMaxDistance = proximityprompt.MaxActivationDistance

    proximityprompt.MaxActivationDistance = 9e9 -- client replicated only
    proximityprompt:InputHoldBegin()

    for i = 1, amount or 1 do -- or 1 cuz number can be nil
        if skip then
            proximityprompt.HoldDuration = 0
        else
            task.wait(proximityprompt.HoldDuration + 0.01) -- better than wait()
        end
    end

    proximityprompt:InputHoldEnd()
    proximityprompt.MaxActivationDistance = oldMaxDistance
    proximityprompt.HoldDuration = oldHoldDuration
end)
saladprint("fireproximityprompt done")
getgenv().http = {}
getgenv().http.request = request
setreadonly(http, true)

getgenv().http_request = request

getgenv().base64 = {}
getgenv().crypt = {}
getgenv().crypt.base64 = {}

getgenv().crypt.base64encode = getgenv().base64encode
getgenv().crypt.base64.encode = getgenv().base64encode
getgenv().crypt.base64_encode = getgenv().base64encode
getgenv().base64.encode = getgenv().base64encode
getgenv().base64_encode = getgenv().base64encode

getgenv().crypt.base64decode = getgenv().base64decode
getgenv().crypt.base64.decode = getgenv().base64decode
getgenv().crypt.base64_decode = getgenv().base64decode
getgenv().base64.decode = getgenv().base64decode
getgenv().base64_decode = getgenv().base64decode

getgenv().crypt.encrypt = getgenv().encrypt
getgenv().crypt.decrypt = getgenv().decrypt

getgenv().crypt.generatebytes = getgenv().generatebytes

getgenv().crypt.generatekey = getgenv().generatekey
getgenv().crypt.hash = getgenv().hash

setreadonly(getgenv().base64, true)
setreadonly(getgenv().crypt, true)
local _oldd = clonefunction(getscriptclosure_handler)
saladprint("crypt/base64/http aliases done")
getgenv().getscriptclosure = newcclosure(function(scr) 
	local closure = _oldd(scr)

	if typeof(closure) == "function" then
		local scriptEnv = getfenv(closure)

		scriptEnv["script"] = scr

		return closure
	else
		return nil
	end
end)
saladprint("getscriptclosure modified done")
getgenv().getscriptfunction = getgenv().getscriptclosure
local oldreq = clonefunction(getrenv().require)
getgenv().require = newcclosure(function(v)
    local oldlevel = getthreadcontext()
    local succ, res = pcall(oldreq, v)
    if not succ and res:find('RobloxScript') then
        succ = nil
        coroutine.resume(coroutine.create(newcclosure(function()
            setthreadcontext((oldlevel > 5 and 2) or 8)
            succ, res = pcall(oldreq, v)
        end)))
        repeat task.wait() until succ ~= nil
    end
    
    setthreadcontext(oldlevel)
    
    if succ then
        return res
    end
end)
saladprint("require modified done")
getgenv().fireclickdetector = newcclosure(function(Target)
	assert(typeof(Target) == "Instance", "invalid argument #1 to 'fireclickdetector' (Instance expected, got " .. type(Target) .. ") ", 2)
	local ClickDetector = Target:FindFirstChild("ClickDetector") or Target
	local PreviousParent = ClickDetector["Parent"]

	local NewPart = Instance.new("Part", getrenv()["workspace"])
	do
		NewPart["Transparency"] = 1
		NewPart["Size"] = Vector3.new(30, 30, 30)
		NewPart["Anchored"] = true
		NewPart["CanCollide"] = false
		getrenv()["task"].delay(15, function()
			if NewPart:IsDescendantOf(getrenv()["game"]) then
				NewPart:Destroy()
			end
		end)
		ClickDetector["Parent"] = NewPart
		ClickDetector["MaxActivationDistance"] = math.huge
	end

	local VirtualUser = getrenv()["game"]:FindService("VirtualUser") or getrenv()["game"]:GetService("VirtualUser")

	local HeartbeatConnection = game:GetService("RunService")["Heartbeat"]:Connect(function()
		local CurrentCamera = getrenv()["workspace"]["CurrentCamera"] or getrenv()["workspace"]["Camera"]
		NewPart["CFrame"] = CurrentCamera["CFrame"] * CFrame.new(0, 0, -20) * CFrame.new(CurrentCamera["CFrame"]["LookVector"]['X'], CurrentCamera["CFrame"]["LookVector"]['Y'], CurrentCamera["CFrame"]["LookVector"]['Z'])
		VirtualUser:ClickButton1(Vector2.new(20, 20), CurrentCamera["CFrame"])
	end)

	ClickDetector["MouseClick"]:Once(function()
		HeartbeatConnection:Disconnect()
		ClickDetector["Parent"] = PreviousParent
		NewPart:Destroy()
	end)
end)
saladprint("fireclickdetector done")

getgenv()["fire_click_detector"] = fireclickdetector
getgenv()["FireClickDetector"] = fireclickdetector
saladprint("aliases for fireclickdetector done")
if Drawing then 
    local Player = game:GetService('Players').LocalPlayer;
    local textService = cloneref(game:GetService("TextService"));

    local drawing = {
        Fonts = {
            UI = 0,
            System = 1,
            Plex = 2,
            Monospace = 3
        }
    };
    
    local renv = getrenv();
    
    local pi = renv.math.pi;
    local huge = renv.math.huge;
    
    local _assert = (renv.assert);
    local _color3new = (renv.Color3.new);
    local _instancenew = (renv.Instance.new);
    local _mathatan2 = (renv.math.atan2);
    local _mathclamp = (renv.math.clamp);
    local _mathmax = (renv.math.max);
    local _setmetatable = (renv.setmetatable);
    local _stringformat = (renv.string.format);
    local _typeof = (renv.typeof);
    local _taskspawn = (renv.task.spawn);
    local _udimnew = (renv.UDim.new);
    local _udim2fromoffset = (renv.UDim2.fromOffset);
    local _udim2new = (renv.UDim2.new);
    local _vector2new = (renv.Vector2.new);
    
    local _destroy = (game.Destroy);
    local _gettextboundsasync = (textService.GetTextBoundsAsync);
    
    local _httpget = (game.HttpGet);
    local _writecustomasset = function(path, data)
        writefile(path,data)
        return getcustomasset(path)
    end
    getgenv().getrenderproperty = newcclosure(function(x, y)
        assert(isrenderobj(x), 'invalid drawing object')
        return x[y];
    end)
    
    getgenv().setrenderproperty = newcclosure(function(x, y, z)
        assert(isrenderobj(x), 'invalid drawing object')
        x[y] = z;
    end)
else 
    warn("[ Salad ] -> C Drawing failed to load... loading luau one") -- shouldnt happen anymore
    loadstring(httpget('https://pastebin.com/raw/zBD4dhXw'))()
end
saladprint("drawing done")
loadstring(httpget("https://raw.githubusercontent.com/Insalad/otherinit/refs/heads/main/decompiler"))()
saladprint("decompiler done")
getgenv().isreadable = isreadonly 
getgenv().isexecclosure = isexecutorclosure
getgenv().is_executor_closure = isexecclosure
getgenv().clonefunc = clonefunction
getgenv().get_scripts = getrunningscripts
getgenv().getmodules = getloadedmodules
getgenv().makereadonly = setreadonly
getgenv().make_readonly = getgenv().makereadonly
getgenv().is_l_closure = islclosure 
getgenv().randomstring = crypt.random
getgenv().syn.write_clipboard = setclipboard
getgenv().setrbxclipboard = setclipboard
getgenv().writeclipboard = setclipboard
getgenv().syn_backup = getgenv().syn
getgenv().syn.crypt = crypt
getgenv().syn.crypto = crypt
getgenv().syn.cache_replace = cache.replace 
getgenv().syn.cache_invalidate = cache.invalidate 
getgenv().syn.is_cached = cache.iscached 
getgenv().syn.set_thread_identity = setthreadidentity 
getgenv().syn.request = request 
getgenv().syn.get_thread_identity = getthreadidentity 
getgenv().syn.queue_on_teleport = queueonteleport 
getgenv().fluxus = {}
getgenv().fluxus.set_thread_identity = setthreadidentity 
getgenv().fluxus.queue_on_teleport = queueonteleport
getgenv().fluxus.request = request 
getgenv().string = string
getgenv().dumpbytecode = getscriptbytecode 
getgenv().loadfileasync = loadfile
getgenv().clearconsole = rconsoleclear 
getgenv().printconsole = rconsoleprint 
getgenv().getsynasset = getcustomasset 
getgenv().debug.getregistry = getreg 
getgenv().readfileasync = readfile 
getgenv().writefileasync = writefile
getgenv().appendfileasync = appendfile 
getgenv().saveplace = saveinstance 
getgenv().protect_gui = syn.protect_gui 
getgenv().unprotect_gui = syn.unprotect_gui 
getgenv().set_thread_identity = setthreadidentity 
getgenv().get_thread_identity = getthreadidentity 
getgenv().checkcallstack = checkcaller 
getgenv().syn.protectgui = getgenv().syn.protect_gui
getgenv().syn.unprotectgui = getgenv().syn.unprotect_gui
getgenv().getprotectedguis = getgenv().getprotecteduis
getgenv().debug.isvalidlevel = getgenv().debug.validlevel
getgenv().is_our_closure = isexecutorclosure 
getgenv().issynapsefunction = isexecutorclosure
getgenv().setrbxclipboard = setclipboard
saladprint("aliases done")
task.wait(1)
local dangerous_functions = {
    "OpenVideosFolder", "OpenScreenshotsFolder", "GetRobuxBalance", "PerformPurchase",
    "PromptBundlePurchase", "PromptNativePurchase", "PromptProductPurchase", "PromptPurchase",
    "PromptThirdPartyPurchase", "Publish", "GetMessageId", "OpenBrowserWindow",
    "RequestInternal", "ExecuteJavaScript", "ToggleRecording", "TakeScreenshot",
    "HttpRequestAsync", "GetLast", "SendCommand", "GetAsync", "GetAsyncFullUrl",
    "RequestAsync", "MakeRequest", "PostAsync", "HttpPost", "PostAsyncFullUrl",
    "PerformPurchaseV2", "PromptGamePassPurchase", "PromptRobloxPurchase",
    "OpenNativeOverlay", "AddCoreScriptLocal", "EmitHybridEvent", "ReturnToJavaScript",
    "Call", "OpenUrl", "SaveScriptProfilingData", "GetProtocolMethodRequestMessageId",
    "GetProtocolMethodResponseMessageId", "PublishProtocolMethodRequest",
    "PublishProtocolMethodResponse", "Subscribe", "SubscribeToProtocolMethodRequest",
    "SubscribeToProtocolMethodResponse", "PromptNativePurchaseWithLocalPlayer",
    "PromptCollectiblesPurchase", "PerformBulkPurchase", "PerformCancelSubscription",
    "PerformSubscriptionPurchase", "PerformSubscriptionPurchaseV2",
    "PrepareCollectiblesPurchase", "PromptBulkPurchase", "PromptCancelSubscription",
    "PromptPremiumPurchase", "PromptSubscriptionPurchase", "OpenWeChatAuthWindow",
    "RequestLimitedAsync", "Run", "CaptureScreenshot", "CreatePostAsync",
    "DeleteCapture", "DeleteCapturesAsync", "GetCaptureFilePathAsync",
    "SaveCaptureToExternalStorage", "SaveCapturesToExternalStorageAsync",
    "GetCaptureUploadDataAsync", "RetrieveCaptures", "SaveScreenshotCapture",
    "GetCredentialsHeaders", "GetDeviceIntegrityToken", "GetDeviceIntegrityTokenYield",
    "NoPromptCreateOutfit", "NoPromptDeleteOutfit", "NoPromptRenameOutfit",
    "NoPromptSaveAvatar", "NoPromptSaveAvatarThumbnailCustomization", "NoPromptSetFavorite",
    "NoPromptUpdateOutfit", "PerformCreateOutfitWithDescription", "PerformRenameOutfit",
    "PerformSaveAvatarWithDescription", "PerformSetFavorite", "PerformUpdateOutfit",
    "PromptCreateOutfit", "PromptDeleteOutfit", "PromptRenameOutfit", "PromptSaveAvatar",
    "PromptSetFavorite", "PromptUpdateOutfit", "PromptImportFile", "PromptImportFiles",
    "GetUsersubscriptionPaymentHistoryAsync", "GetUserSubscriptionDetailsInternalAsync",
    "CallFunction", "BindCoreActive", "ReportAbuse", "ReportAbuseV3", "ReportChatAbuse",
    "GetUserSubscriptionStatusAsync", "Load"
}
local dangerous_functions_map = {}
for _, func_name in ipairs(dangerous_functions) do
    dangerous_functions_map[func_name] = true
end
local ogidentityset = setidentity
if not ogidentityset then
    warn("[ Salad ] -> Original setidentity function not found")
    return
end
function grahhh(message)
    warn(message)
    return nil
end
getgenv().setidentity = newcclosure(function(level, ...)
    if level == 8 then
        local success, callstack = pcall(debug.traceback)
        if not success then
            return grahhh("[ Salad ] -> Failed to get call stack")
        end
        if callstack and (
            callstack:match("__namecall") or 
            callstack:match("SaveScriptProfilingData") or 
            callstack:match("GetObjects")
        ) then
            return grahhh("[ Salad ] -> Blocked potentially dangerous identity change")
        end
    end
    local success, shouldBlock = pcall(function()
        local callstack = debug.traceback()
        return callstack and (
            callstack:match("BatchPayload") or 
            callstack:match("OpenUrl") or 
            callstack:match("LinkingService")
        )
    end)
    if not success or shouldBlock == true then
        return grahhh("[ Salad ] -> Blocked suspicious identity change")
    end
    local result = {pcall(ogidentityset, level, ...)}
    if not result[1] then
        warn("[ Salad ] -> Error in setidentity:", result[2])
        return nil
    end
    return select(2, unpack(result))
end)
pcall(function() saladprint("Protected setidentity applied") end)
pcall(function()
    local mt = getrawmetatable(game)
    if not mt then
        warn("[ Salad ] -> Game metatable not found")
        return
    end
    local old_namecall = mt.__namecall
    if not old_namecall then
        warn("[ Salad ] -> __namecall metamethod not found")
        return
    end
    local success = pcall(function()
        setreadonly(mt, false)
    end)
    if not success then
        warn("[ Salad ] -> Failed to make metatable writable")
        return
    end
    mt.__namecall = newcclosure(function(self, ...)
        local success, method = pcall(getnamecallmethod)
        if success and method and dangerous_functions_map[method] then
            return grahhh("[ Salad ] -> Blocked dangerous method: " .. method)
        end
        return old_namecall(self, ...)
    end)
    pcall(function()
        setreadonly(mt, true)
    end)
    pcall(function() saladprint("Protected namecall applied") end)
end)

pcall(function() saladprint("Protection script loaded successfully") end)
saladprint("protection done")
getgenv().IS_SALAD_LOADED = true
print("[ Salad ] -> Loaded Init")
