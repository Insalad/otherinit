--[[

 ░▒▓███████▓▒░░▒▓██████▓▒░░▒▓█▓▒░       ░▒▓██████▓▒░░▒▓███████▓▒░  
░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ 
░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ 
 ░▒▓██████▓▒░░▒▓████████▓▒░▒▓█▓▒░      ░▒▓████████▓▒░▒▓█▓▒░░▒▓█▓▒░ 
       ░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ 
       ░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░      ░▒▓█▓▒░░▒▓█▓▒░▒▓█▓▒░░▒▓█▓▒░ 
░▒▓███████▓▒░░▒▓█▓▒░░▒▓█▓▒░▒▓████████▓▒░▒▓█▓▒░░▒▓█▓▒░▒▓███████▓▒░                                                                   
]]
if not game:IsLoaded() then game.Loaded:Wait() end
-- hi sigma check
local CoreGui = game:GetService("CoreGui")
local RobloxGui = CoreGui:FindFirstChild("RobloxGui")

if not RobloxGui then return end

local Children = RobloxGui:FindFirstChild("Children")
if not Children then
    warn("[ Salad ] -> Detected a critical issue (RobloxGui.Children is nil), reopening roblox is reccomended\nMaking a copy of Children folder...")
    Children = Instance.new("Folder")
    Children.Name = "Children"
    Children.Parent = RobloxGui
end

local Main = Children:FindFirstChild("Main")
if not Main then
    Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.Parent = Children
end

local MainSizeConstraint = Main:FindFirstChild("SizeConstraint")
if not MainSizeConstraint then
    MainSizeConstraint = Instance.new("UISizeConstraint")
    MainSizeConstraint.Name = "SizeConstraint"
    MainSizeConstraint.Parent = Main
end

local MainAspectRatio = Main:FindFirstChild("AsspectRatioConstraint")
if not MainAspectRatio then
    MainAspectRatio = Instance.new("UIAspectRatioConstraint")
    MainAspectRatio.Name = "AsspectRatioConstraint"
    MainAspectRatio.Parent = Main
end

local EmotesWheel = Main:FindFirstChild("EmotesWheel")
if not EmotesWheel then
    EmotesWheel = Instance.new("Frame")
    EmotesWheel.Name = "EmotesWheel"
    EmotesWheel.Parent = Main
end

local MouseUnlock = EmotesWheel:FindFirstChild("MouseUnlock")
if not MouseUnlock then
    MouseUnlock = Instance.new("TextButton")
    MouseUnlock.Name = "MouseUnlock"
    MouseUnlock.Parent = EmotesWheel
end

local Front = EmotesWheel:FindFirstChild("Front")
if not Front then
    Front = Instance.new("Frame")
    Front.Name = "Front"
    Front.Parent = EmotesWheel
end

local SlotNumbers = Front:FindFirstChild("SlotNumbers")
if not SlotNumbers then
    SlotNumbers = Instance.new("Frame")
    SlotNumbers.Name = "SlotNumbers"
    SlotNumbers.Parent = Front
end

for i = 1, 8 do
    local slot = SlotNumbers:FindFirstChild(tostring(i))
    if not slot then
        slot = Instance.new("TextLabel")
        slot.Name = tostring(i)
        slot.Parent = SlotNumbers
        
        local textConstraint = slot:FindFirstChild("TextSizeConstraint")
        if not textConstraint then
            textConstraint = Instance.new("UITextSizeConstraint")
            textConstraint.Name = "TextSizeConstraint"
            textConstraint.Parent = slot
        end
    end
end

local EmotesButtons = Front:FindFirstChild("EmotesButtons")
if not EmotesButtons then
    EmotesButtons = Instance.new("TextButton")
    EmotesButtons.Name = "EmotesButtons"
    EmotesButtons.Parent = Front
end

for i = 1, 4 do
    local imageLabel = EmotesButtons:FindFirstChild(tostring(i))
    if not imageLabel then
        imageLabel = Instance.new("ImageLabel")
        imageLabel.Name = tostring(i)
        imageLabel.Parent = EmotesButtons
        
        local aspectRatio = imageLabel:FindFirstChild("AsspectRatioConstraint")
        if not aspectRatio then
            aspectRatio = Instance.new("UIAspectRatioConstraint")
            aspectRatio.Name = "AsspectRatioConstraint"
            aspectRatio.Parent = imageLabel
        end
    end
end

local Back = EmotesWheel:FindFirstChild("Back")
if not Back then
    Back = Instance.new("Frame")
    Back.Name = "Back"
    Back.Parent = EmotesWheel
end

local Background = Back:FindFirstChild("Background")
if not Background then
    Background = Instance.new("Folder")
    Background.Name = "Background"
    Background.Parent = Back
end

local BackgroundCircleOverlay = Background:FindFirstChild("BackgroundCircleOverlay")
if not BackgroundCircleOverlay then
    BackgroundCircleOverlay = Instance.new("Frame")
    BackgroundCircleOverlay.Name = "BackgroundCircleOverlay"
    BackgroundCircleOverlay.Parent = Background
end

local UICorner = BackgroundCircleOverlay:FindFirstChild("1")
if not UICorner then
    UICorner = Instance.new("UICorner")
    UICorner.Name = "1"
    UICorner.Parent = BackgroundCircleOverlay
end

local Selection = Background:FindFirstChild("Selection")
if not Selection then
    Selection = Instance.new("Frame")
    Selection.Name = "Selection"
    Selection.Parent = Background
end

local SelectionEffect = Selection:FindFirstChild("SelectionEffect")
if not SelectionEffect then
    SelectionEffect = Instance.new("Frame")
    SelectionEffect.Name = "SelectionEffect"
    SelectionEffect.Parent = Selection
end

local SelectedLine = SelectionEffect:FindFirstChild("SelectedLine")
if not SelectedLine then
    SelectedLine = Instance.new("ImageLabel")
    SelectedLine.Name = "SelectedLine"
    SelectedLine.Parent = SelectionEffect
end

local SelectedLineAspect = SelectedLine:FindFirstChild("AsspectRatioConstraint")
if not SelectedLineAspect then
    SelectedLineAspect = Instance.new("UIAspectRatioConstraint")
    SelectedLineAspect.Name = "AsspectRatioConstraint"
    SelectedLineAspect.Parent = SelectedLine
end

local HelloThere = SelectedLineAspect:FindFirstChild("HelloThere")
if not HelloThere then
    HelloThere = Instance.new("Folder")
    HelloThere.Name = "HelloThere"
    HelloThere.Parent = SelectedLineAspect
end

local BackgroundGradient = Background:FindFirstChild("BackgroundGradient")
if not BackgroundGradient then
    BackgroundGradient = Instance.new("Frame")
    BackgroundGradient.Name = "BackgroundGradient"
    BackgroundGradient.Parent = Background
end

local SelectionGradient = BackgroundGradient:FindFirstChild("SelectionGradient")
if not SelectionGradient then
    SelectionGradient = Instance.new("Frame")
    SelectionGradient.Name = "SelectionGradient"
    SelectionGradient.Parent = BackgroundGradient
end

local SelectedGradient = SelectionGradient:FindFirstChild("SelectedGradient")
if not SelectedGradient then
    SelectedGradient = Instance.new("ImageLabel")
    SelectedGradient.Name = "SelectedGradient"
    SelectedGradient.Parent = SelectionGradient
end

local GradientSizeConstraint = SelectedGradient:FindFirstChild("SizeConstraint")
if not GradientSizeConstraint then
    GradientSizeConstraint = Instance.new("UISizeConstraint")
    GradientSizeConstraint.Name = "SizeConstraint"
    GradientSizeConstraint.Parent = SelectedGradient
end

local GradientAspectRatio = SelectedGradient:FindFirstChild("AsspectRatioConstraint")
if not GradientAspectRatio then
    GradientAspectRatio = Instance.new("UIAspectRatioConstraint")
    GradientAspectRatio.Name = "AsspectRatioConstraint"
    GradientAspectRatio.Parent = SelectedGradient
end

local BackgroundImage = Background:FindFirstChild("BackgroundImage")
if not BackgroundImage then
    BackgroundImage = Instance.new("ImageLabel")
    BackgroundImage.Name = "BackgroundImage"
    BackgroundImage.Parent = Background
end

local BackgroundText = Background:FindFirstChild("BackgroundText")
if not BackgroundText then
    BackgroundText = Instance.new("Frame")
    BackgroundText.Name = "BackgroundText"
    BackgroundText.Parent = Background
end

local MiddleText = BackgroundText:FindFirstChild("MiddleText")
if not MiddleText then
    MiddleText = Instance.new("TextLabel")
    MiddleText.Name = "MiddleText"
    MiddleText.Parent = BackgroundText
end

local MiddleTextConstraint = MiddleText:FindFirstChild("TextSizeConstraint")
if not MiddleTextConstraint then
    MiddleTextConstraint = Instance.new("UITextSizeConstraint")
    MiddleTextConstraint.Name = "TextSizeConstraint"
    MiddleTextConstraint.Parent = MiddleText
end

local ErrorMessage = Children:FindFirstChild("ErrorMessage")
if not ErrorMessage then
    ErrorMessage = Instance.new("Frame")
    ErrorMessage.Name = "ErrorMessage"
    ErrorMessage.Parent = Children
end

local ErrorSizeConstraint = ErrorMessage:FindFirstChild("SizeConstraint")
if not ErrorSizeConstraint then
    ErrorSizeConstraint = Instance.new("UISizeConstraint")
    ErrorSizeConstraint.Name = "SizeConstraint"
    ErrorSizeConstraint.Parent = ErrorMessage
end

local ErrorAspectRatio = ErrorMessage:FindFirstChild("AsspectRatioConstraint")
if not ErrorAspectRatio then
    ErrorAspectRatio = Instance.new("UIAspectRatioConstraint")
    ErrorAspectRatio.Name = "AsspectRatioConstraint"
    ErrorAspectRatio.Parent = ErrorMessage
end

local ErrorText = ErrorMessage:FindFirstChild("ErrorText")
if not ErrorText then
    ErrorText = Instance.new("TextLabel")
    ErrorText.Name = "ErrorText"
    ErrorText.Parent = ErrorMessage
end

local ErrorTextSizeConstraint = ErrorText:FindFirstChild("SizeConstraint")
if not ErrorTextSizeConstraint then
    ErrorTextSizeConstraint = Instance.new("UISizeConstraint")
    ErrorTextSizeConstraint.Name = "SizeConstraint"
    ErrorTextSizeConstraint.Parent = ErrorText
end

local ErrorTextConstraint = ErrorText:FindFirstChild("TextSizeConstraint")
if not ErrorTextConstraint then
    ErrorTextConstraint = Instance.new("UITextSizeConstraint")
    ErrorTextConstraint.Name = "TextSizeConstraint"
    ErrorTextConstraint.Parent = ErrorText
end

local ErrorIcon = ErrorMessage:FindFirstChild("ErrorIcon")
if not ErrorIcon then
    ErrorIcon = Instance.new("ImageLabel")
    ErrorIcon.Name = "ErrorIcon"
    ErrorIcon.Parent = ErrorMessage
end

local ErrorIconAspectRatio = ErrorIcon:FindFirstChild("AsspectRatioConstraint")
if not ErrorIconAspectRatio then
    ErrorIconAspectRatio = Instance.new("UIAspectRatioConstraint")
    ErrorIconAspectRatio.Name = "AsspectRatioConstraint"
    ErrorIconAspectRatio.Parent = ErrorIcon
end
-- vars
getgenv().IS_SALAD_LOADED = false
getgenv().shared = shared 
local camera = workspace.CurrentCamera
local RunService = game:GetService("CoreGui")
-- tables 
getgenv().syn = {}
getgenv().salad = {}
getgenv().syn_backup = {}
getgenv().ogfs = {}
local keyshit = {}
local protecteduis = {}
local names = {}
-- functions
getgenv().makewriteable = newcclosure(function(taable)
    return setreadonly(taable, false)
end)
getgenv().iswriteable = newcclosure(function(tbl)
    return not table.isfrozen(tbl)
end)
getgenv().httppost = newcclosure(function(URL, body, contenttype) 
    return game:HttpPostAsync(URL, body, contenttype)
end)
getgenv().syn.protect_gui = newcclosure(function(gui)
    names[gui] = {name = gui.Name, parent = gui.Parent}
    protecteduis[gui] = gui
    gui.Name = crypt.random(64)
    gui.Parent = gethui()
end)
getgenv().syn.unprotect_gui = newcclosure(function(gui)
    if names[gui] then
        gui.Name = names[gui].name
        gui.Parent = names[gui].parent
    end
    protecteduis[gui] = nil
end)
getgenv().syn.secure_call = newcclosure(function(func)
    local suc, rec = pcall(func) 
	if not suc then 
		warn("[ Syn Secure Call ]: "..tostring(rec))
	end 
end)
getgenv().getprotecteduis = newcclosure(function()
    return protecteduis
end)

local testdebug = table.clone(debug)

testdebug.getconstant = getgenv().getconstant
testdebug.getconstants = getgenv().getconstants
testdebug.getinfo = getgenv().getinfo
testdebug.setconstant = getgenv().setconstant
testdebug.getproto = getgenv().getproto
testdebug.getprotos = getgenv().getprotos
testdebug.getstack = getgenv().getstack
testdebug.setstack = getgenv().setstack
testdebug.getupvalue = getgenv().getupvalue
testdebug.getupvalues = getgenv().getupvalues
testdebug.setupvalue = getgenv().setupvalue
testdebug.getregistry = getgenv().getregistry

debug = testdebug

getgenv().bit = {}

for i, v in next, bit32 do
bit[i] = v
end

bit.ror = bit.rrotate
bit.rol = bit.lrotate
bit.rrotate = nil
bit.lrotate = nil

bit.badd = function(a, b)
   return a + b
end

bit.bsub = function(a, b)
   return a - b
end

bit.bdiv = function(a, b)
   return a / b
end

bit.bmul = function(a, b)
   return a * b
end

bit.tobit = function(x)
  x = x % (2^32)
  if x >= 0x80000000 then x = x - (2^32) end
  return x
end

bit.tohex = function(x, n)
 n = n or 8
 local up
 if n <= 0 then
   if n == 0 then return '' end
   up = true
   n = - n
 end
 x = bit.band(x, 16^n-1)
 return ('%0'..n..(up and 'X' or 'x')):format(x)
end

bit.bswap = function(x)
 local a = bit.band(x, 0xff)
 x = bit.rshift(x, 8)
 local b = bit.band(x, 0xff)
 x = bit.rshift(x, 8)
 local c = bit.band(x, 0xff)
 x = bit.rshift(x, 8)
 local d = bit.band(x, 0xff)
 return bit.lshift(bit.lshift(bit.lshift(a, 8) + b, 8) + c, 8) + d
end
getgenv().setthreadidentity = newcclosure(function(identity: number): ()
    _setidentity(identity)
    task.wait()
end)

getgenv().setidentity = getgenv().setthreadidentity
getgenv().setthreadcontext = getgenv().setthreadidentity

getgenv().getinstances = newcclosure(function()
            local objs = {}
            for i,v in next, getreg() do
               if type(v)=='table' then
                  for o,b in next, v do
                      if typeof(b) == "Instance" then
                           table.insert(objs, b)
                      end
                  end
               end
            end
         return objs
 end)


do
    local CoreGui = game:GetService('CoreGui')
    local HttpService = game:GetService('HttpService')

    local comm_channels = CoreGui:FindFirstChild('comm_channels') or Instance.new('Folder', CoreGui)
    if comm_channels.Name ~= 'comm_channels' then
        comm_channels.Name = 'comm_channels'
    end
    getgenv().create_comm_channel = newcclosure(function() 
        local id = HttpService:GenerateGUID()
        local event = Instance.new('BindableEvent', comm_channels)
        event.Name = id
        return id, event
    end)

    getgenv().get_comm_channel = newcclosure(function(id) 
        assert(type(id) == 'string', 'string expected as argument #1')
        return comm_channels:FindFirstChild(id)
    end)
end

getgenv().getactors = newcclosure(function()
    local actors = {};
    for i, v in game:GetDescendants() do
        if v:IsA("Actor") then
            table.insert(actors, v);
        end
    end
    return actors;
end);

getgenv().getnilinstances = newcclosure(function()
    local objs = {}
	for i,v in next,getreg() do
		if type(v)=="table" then
			for o,b in next,v do
				if typeof(b) == "Instance" and b.Parent==nil then
					table.insert(objs, b)
				end
			end
		end
	end
	return objs
end)

getgenv().getscripthash = newcclosure(function(script)
    return script:GetHash()
end)

setreadonly(getgenv().debug,false)
getgenv().debug.traceback = getrenv().debug.traceback
getgenv().debug.profilebegin = getrenv().debug.profilebegin
getgenv().debug.profileend = getrenv().debug.profileend
getgenv().debug.getmetatable = getgenv().getrawmetatable
getgenv().debug.setmetatable = getgenv().setrawmetatable
getgenv().debug.info = getrenv().debug.info

getgenv().getrunningscripts = newcclosure(function()
    local t = table.create(0)

    for i,v in pairs(getreg()) do
        if typeof(v) == "thread" then
            local a = gettenv(v)

            if a["script"] then
                if not table.find(t,a.script) then
                    table.insert(t, a.script)
                end
            end
        end
    end

return t

end)

getgenv().getloadedmodules = newcclosure(function()
    local list = {}
    for i, v in getgc(false) do
        if typeof(v) == "function" then
            local success, env = pcall(getfenv, v)
            if success and typeof(env) == "table" and typeof(env["script"]) == "Instance" and env["script"]:IsA("ModuleScript") then
                if not table.find(list, env["script"]) then
                    table.insert(list, env["script"])
                end
            end
        end
    end
    return list
end)

getgenv().getsenv = newcclosure(function(script_instance)
   for i, v in pairs(getreg()) do
      if type(v) == "function" then
         if getfenv(v).script == script_instance then
             return getfenv(v)
             end
          end
     end
end)

getgenv().isnetworkowner = newcclosure(function(part: BasePart): boolean
    return part.ReceiveAge == 0 and not part.Anchored and part.Velocity.Magnitude > 0
end)

getgenv().firesignal = newcclosure(function(signal, ...)
    local connections = getconnections(signal)
    for _, connection in connections do
        connection.Function(...)
    end
end)

getgenv().setsimulationradius = newcclosure(function(newRadius)
    assert(newRadius, `arg #1 is missing`)
    assert(type(newRadius) == "number", `arg #1 must be type number`)

    local LocalPlayer = game:GetService("Players").LocalPlayer
    if LocalPlayer then
        LocalPlayer.SimulationRadius = newRadius
        LocalPlayer.MaximumSimulationRadius = newRadius
    end
end)

getgenv().getsimulationradius = newcclosure(function()
    assert(newRadius, `arg #1 is missing`)
    assert(type(newRadius) == "number", `arg #1 must be type number`)

    local LocalPlayer = game:GetService("Players").LocalPlayer
    if LocalPlayer then
        return LocalPlayer.SimulationRadius
    end
end)


getgenv().fireproximityprompt = newcclosure(function(proximityprompt, amount, skip)
    assert(
        typeof(proximityprompt) == "Instance" and proximityprompt:IsA("ProximityPrompt"),
        `arg #1 must be ProximityPrompt`
    )

    if amount ~= nil then
        assert(type(amount) == "number", `arg #2 must be type number`)
        if skip ~= nil then
            assert(type(skip) == "boolean", `arg #3 must be type boolean`)
        end
    end

    local oldHoldDuration = proximityprompt.HoldDuration
    local oldMaxDistance = proximityprompt.MaxActivationDistance

    proximityprompt.MaxActivationDistance = 9e9 -- client replicated only
    proximityprompt:InputHoldBegin()

    for i = 1, amount or 1 do -- or 1 cuz number can be nil
        if skip then
            proximityprompt.HoldDuration = 0
        else
            task.wait(proximityprompt.HoldDuration + 0.01) -- better than wait()
        end
    end

    proximityprompt:InputHoldEnd()
    proximityprompt.MaxActivationDistance = oldMaxDistance
    proximityprompt.HoldDuration = oldHoldDuration
end)

getgenv().http = {}
getgenv().http.request = request
setreadonly(http, true)

getgenv().http_request = request

getgenv().base64 = {}
getgenv().crypt = {}
getgenv().crypt.base64 = {}

getgenv().crypt.base64encode = getgenv().base64encode
getgenv().crypt.base64.encode = getgenv().base64encode
getgenv().crypt.base64_encode = getgenv().base64encode
getgenv().base64.encode = getgenv().base64encode
getgenv().base64_encode = getgenv().base64encode

getgenv().crypt.base64decode = getgenv().base64decode
getgenv().crypt.base64.decode = getgenv().base64decode
getgenv().crypt.base64_decode = getgenv().base64decode
getgenv().base64.decode = getgenv().base64decode
getgenv().base64_decode = getgenv().base64decode

getgenv().crypt.encrypt = getgenv().encrypt
getgenv().crypt.decrypt = getgenv().decrypt

getgenv().crypt.generatebytes = getgenv().generatebytes

getgenv().crypt.generatekey = getgenv().generatekey
getgenv().crypt.hash = getgenv().hash

setreadonly(getgenv().base64, true)
setreadonly(getgenv().crypt, true)
local _oldd = clonefunction(getscriptclosure_handler)

getgenv().getscriptclosure = newcclosure(function(scr) 
	local closure = _oldd(scr)

	if typeof(closure) == "function" then
		local scriptEnv = getfenv(closure)

		scriptEnv["script"] = scr

		return closure
	else
		return nil
	end
end)

getgenv().getscriptfunction = getgenv().getscriptclosure
local oldreq = clonefunction(getrenv().require)
getgenv().require = newcclosure(function(v)
    local oldlevel = getthreadcontext()
    local succ, res = pcall(oldreq, v)
    if not succ and res:find('RobloxScript') then
        succ = nil
        coroutine.resume(coroutine.create(newcclosure(function()
            setthreadcontext((oldlevel > 5 and 2) or 8)
            succ, res = pcall(oldreq, v)
        end)))
        repeat task.wait() until succ ~= nil
    end
    
    setthreadcontext(oldlevel)
    
    if succ then
        return res
    end
end)
getgenv().fireclickdetector = newcclosure(function(Target)
	assert(typeof(Target) == "Instance", "invalid argument #1 to 'fireclickdetector' (Instance expected, got " .. type(Target) .. ") ", 2)
	local ClickDetector = Target:FindFirstChild("ClickDetector") or Target
	local PreviousParent = ClickDetector["Parent"]

	local NewPart = Instance.new("Part", getrenv()["workspace"])
	do
		NewPart["Transparency"] = 1
		NewPart["Size"] = Vector3.new(30, 30, 30)
		NewPart["Anchored"] = true
		NewPart["CanCollide"] = false
		getrenv()["task"].delay(15, function()
			if NewPart:IsDescendantOf(getrenv()["game"]) then
				NewPart:Destroy()
			end
		end)
		ClickDetector["Parent"] = NewPart
		ClickDetector["MaxActivationDistance"] = math.huge
	end

	local VirtualUser = getrenv()["game"]:FindService("VirtualUser") or getrenv()["game"]:GetService("VirtualUser")

	local HeartbeatConnection = game:GetService("RunService")["Heartbeat"]:Connect(function()
		local CurrentCamera = getrenv()["workspace"]["CurrentCamera"] or getrenv()["workspace"]["Camera"]
		NewPart["CFrame"] = CurrentCamera["CFrame"] * CFrame.new(0, 0, -20) * CFrame.new(CurrentCamera["CFrame"]["LookVector"]['X'], CurrentCamera["CFrame"]["LookVector"]['Y'], CurrentCamera["CFrame"]["LookVector"]['Z'])
		VirtualUser:ClickButton1(Vector2.new(20, 20), CurrentCamera["CFrame"])
	end)

	ClickDetector["MouseClick"]:Once(function()
		HeartbeatConnection:Disconnect()
		ClickDetector["Parent"] = PreviousParent
		NewPart:Destroy()
	end)
end)


getgenv()["fire_click_detector"] = fireclickdetector
getgenv()["FireClickDetector"] = fireclickdetector

local Player = game:GetService('Players').LocalPlayer;
local textService = cloneref(game:GetService("TextService"));

local drawing = {
    Fonts = {
        UI = 0,
        System = 1,
        Plex = 2,
        Monospace = 3
    }
};

local renv = getrenv();

local pi = renv.math.pi;
local huge = renv.math.huge;

local _assert = (renv.assert);
local _color3new = (renv.Color3.new);
local _instancenew = (renv.Instance.new);
local _mathatan2 = (renv.math.atan2);
local _mathclamp = (renv.math.clamp);
local _mathmax = (renv.math.max);
local _setmetatable = (renv.setmetatable);
local _stringformat = (renv.string.format);
local _typeof = (renv.typeof);
local _taskspawn = (renv.task.spawn);
local _udimnew = (renv.UDim.new);
local _udim2fromoffset = (renv.UDim2.fromOffset);
local _udim2new = (renv.UDim2.new);
local _vector2new = (renv.Vector2.new);

local _destroy = (game.Destroy);
local _gettextboundsasync = (textService.GetTextBoundsAsync);

local _httpget = (game.HttpGet);
local _writecustomasset = function(path, data)
	writefile(path,data)
	return getcustomasset(path)
end
getgenv().getrenderproperty = newcclosure(function(x, y)
	assert(isrenderobj(x), 'invalid drawing object')
    return x[y];
end)

getgenv().setrenderproperty = newcclosure(function(x, y, z)
    assert(isrenderobj(x), 'invalid drawing object')
    x[y] = z;
end)
loadstring(httpget("https://raw.githubusercontent.com/Insalad/otherinit/refs/heads/main/decompiler"))()
getgenv().isreadable = isreadonly 
getgenv().isexecclosure = isexecutorclosure
getgenv().is_executor_closure = isexecclosure
getgenv().clonefunc = clonefunction
getgenv().get_scripts = getrunningscripts
getgenv().getmodules = getloadedmodules
getgenv().makereadonly = setreadonly
getgenv().make_readonly = getgenv().makereadonly
getgenv().is_l_closure = islclosure 
getgenv().randomstring = crypt.random
getgenv().syn.write_clipboard = setclipboard
getgenv().setrbxclipboard = setclipboard
getgenv().writeclipboard = setclipboard
getgenv().syn_backup = getgenv().syn
getgenv().syn.crypt = crypt
getgenv().syn.crypto = crypt
getgenv().syn.cache_replace = cache.replace 
getgenv().syn.cache_invalidate = cache.invalidate 
getgenv().syn.is_cached = cache.iscached 
getgenv().syn.set_thread_identity = setthreadidentity 
getgenv().syn.request = request 
getgenv().syn.get_thread_identity = getthreadidentity 
getgenv().syn.queue_on_teleport = queueonteleport 
getgenv().fluxus = {}
getgenv().fluxus.set_thread_identity = setthreadidentity 
getgenv().fluxus.queue_on_teleport = queueonteleport
getgenv().fluxus.request = request 
getgenv().string = string
getgenv().dumpbytecode = getscriptbytecode 
getgenv().loadfileasync = loadfile
getgenv().clearconsole = rconsoleclear 
getgenv().printconsole = rconsoleprint 
getgenv().getsynasset = getcustomasset 
getgenv().debug.getregistry = getreg 
getgenv().readfileasync = readfile 
getgenv().writefileasync = writefile
getgenv().appendfileasync = appendfile 
getgenv().saveplace = saveinstance 
getgenv().protect_gui = syn.protect_gui 
getgenv().unprotect_gui = syn.unprotect_gui 
getgenv().set_thread_identity = setthreadidentity 
getgenv().get_thread_identity = getthreadidentity 
getgenv().checkcallstack = checkcaller 
getgenv().syn.protectgui = getgenv().syn.protect_gui
getgenv().syn.unprotectgui = getgenv().syn.unprotect_gui
getgenv().getprotectedguis = getgenv().getprotecteduis
getgenv().debug.isvalidlevel = getgenv().debug.validlevel
getgenv().is_our_closure = isexecutorclosure 
getgenv().issynapsefunction = isexecutorclosure
getgenv().setrbxclipboard = setclipboard
task.wait(1)
local ogidentityset = setidentity
getgenv().setidentity = newcclosure(function(level, ...)
    if level == 8 then
        local callstack = debug.traceback()
        if callstack:match("__namecall") or callstack:match("SaveScriptProfilingData") or callstack:match("GetObjects") then
            warn("hi vro someone tried to do funni funnies with savescriptprofilingdata but salad is more skibidi")
            return false
        end
    end
    local success, result = pcall(function()
        local callstack = debug.traceback()
        if callstack:match("BatchPayload") or callstack:match("OpenUrl") or callstack:match("LinkingService") then
            return false
        end
        return true
    end)
    if not success or result == false then
        warn("hi vro someone tried to do funni funnies with savescriptprofilingdata but salad is more skibidi")
        return false
    end
    return pcall(ogidentityset, level, ...)
end)
local mt = getrawmetatable(game)
if mt then
    local old_namecall = mt.__namecall
    setreadonly(mt, false)
    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        if method == "SaveScriptProfilingData" or 
           method == "OpenUrl" then
            warn("hi vro someone tried to do funni funnies with savescriptprofilingdata but salad is more skibidi")
            return nil
        end
        return old_namecall(self, ...)
    end)
    setreadonly(mt, true)
end
print("[ Salad ] -> Loaded Init")
getgenv().IS_SALAD_LOADED = true
